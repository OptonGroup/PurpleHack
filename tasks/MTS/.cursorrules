# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- При работе с планировщиком VM важно учитывать баланс между утилизацией ресурсов и количеством миграций
- Для тестов с квантовыми флуктуациями необходимо особое внимание к обработке граничных случаев
- При работе с ресурсами важно учитывать не только CPU и RAM, но и их соотношение
- Стратегия консолидации VM должна учитывать возможность получения бонусов за выключение неиспользуемых хостов

## Новые наблюдения (2025-03-11)

1. **Оптимизация размещения VM**:
   - Сортировка VM по размеру улучшает начальное размещение
   - Учет соотношения CPU/RAM помогает избежать фрагментации ресурсов
   - Штраф за высокую утилизацию предотвращает перегрузку хостов

2. **Управление миграциями**:
   - Введен порог минимальной выгоды для миграции (MIN_BENEFIT_FOR_MIGRATION)
   - Уменьшено максимальное число миграций за раунд (MAX_MIGRATIONS = 3)
   - Добавлен механизм отмены невыгодных миграций

3. **Мониторинг и оценка**:
   - Реализована точная формула вознаграждения за утилизацию
   - Добавлен расчет общего счета с учетом всех факторов
   - Улучшено логирование для отладки

4. **Оптимизация производительности**:
   - Реализовано кэширование результатов calculate_host_capacity
   - Ключ кэша учитывает все важные параметры (ID хоста, список VM, характеристики VM)
   - Кэш очищается в начале каждого раунда для предотвращения утечек памяти
   - Добавлено копирование результатов при возврате из кэша для предотвращения мутаций

5. **Улучшения в коде**:
   - Обновлена целевая утилизация до точного значения 0.807197
   - Уменьшен порог нижней утилизации до 0.3 для более агрессивной консолидации
   - Добавлен минимальный порог выгоды для миграций (MIN_BENEFIT_FOR_MIGRATION)
   - Уменьшено максимальное число миграций за раунд до 3

6. **Оптимизация миграций**:
   - Добавлена быстрая предварительная оценка необходимости миграций
   - Реализована приоритизация миграций на основе утилизации и размера VM
   - Введены дополнительные проверки для пропуска ненужных миграций
   - Оптимизировано количество вычислений оценок

7. **Улучшения в стратегии**:
   - Миграции теперь оцениваются в два этапа (быстрая проверка + полная оценка)
   - Приоритет отдается миграциям с хостов с высокой утилизацией
   - Учитывается размер VM при выборе кандидатов на миграцию
   - Добавлены проверки близости к целевой утилизации

## План дальнейших улучшений

1. **Оптимизация производительности**:
   - [x] Кэширование результатов calculate_host_capacity
   - [x] Оптимизация вычисления оценок для миграций
   - [ ] Уменьшение количества копирований словарей

2. **Улучшение стратегии размещения**:
   - [ ] Добавить предварительную оценку необходимого количества хостов
   - [ ] Реализовать более агрессивную консолидацию на ранних этапах
   - [ ] Улучшить обработку граничных случаев при высокой нагрузке

3. **Управление выключенными хостами**:
   - [ ] Добавить прогнозирование возможности выключения хоста
   - [ ] Реализовать стратегию постепенного освобождения хостов
   - [ ] Оптимизировать получение бонусов за выключенные хосты

4. **Улучшение отказоустойчивости**:
   - [ ] Добавить обработку ошибок при парсинге JSON
   - [ ] Улучшить восстановление после сбоев
   - [ ] Добавить валидацию входных данных

5. **Метрики и мониторинг**:
   - [ ] Добавить графики утилизации хостов
   - [ ] Реализовать сбор статистики по миграциям
   - [ ] Улучшить анализ причин отказов размещения

## Следующие приоритетные задачи

1. Оптимизировать копирование данных:
   - Реализовать механизм shallow copy где возможно
   - Использовать ссылки вместо копий для неизменяемых данных
   - Оптимизировать работу с большими словарями

2. Улучшить консолидацию VM:
   - Добавить анализ трендов утилизации
   - Реализовать предварительную оценку необходимого количества хостов
   - Оптимизировать стратегию выключения хостов

3. Улучшить мониторинг:
   - Добавить метрики эффективности миграций
   - Реализовать отслеживание причин отказов размещения
   - Добавить анализ производительности кэширования

## Метрики для отслеживания

1. **Производительность**:
   - Время выполнения каждого раунда
   - Количество обращений к кэшу и процент попаданий
   - Время, затраченное на оценку миграций

2. **Эффективность размещения**:
   - Средняя утилизация хостов
   - Количество выключенных хостов
   - Количество и причины отказов размещения

3. **Эффективность миграций**:
   - Соотношение успешных и отмененных миграций
   - Средняя выгода от миграций
   - Распределение причин отмены миграций

## Следующие шаги

1. Реализовать кэширование результатов calculate_host_capacity
2. Добавить прогнозирование утилизации хостов
3. Улучшить стратегию консолидации VM
4. Оптимизировать использование памяти
5. Добавить более подробную статистику

# Scratchpad

## Новая информация о треке (2025-03-11)

### Детальное описание задачи

1. **Цель**: Разработать планировщик размещения виртуальных машин (VM) на физических серверах (хостах) в облачной платформе MWS Cloud Platform.

2. **Бизнес-контекст**:
   - MWS Cloud Platform - это облачная платформа, разработанная командой MTS Web Services
   - Планировщик должен оптимально распределять VM по хостам
   - Целевая утилизация хостов - ~80% (оптимальный баланс между эффективностью и надежностью)
   - Выключенные хосты экономят электроэнергию (это поощряется в системе оценки)

3. **Формат взаимодействия**:
   - Прогон состоит из нескольких раундов
   - На каждом раунде: получаем JSON на стандартный ввод → обрабатываем → выводим JSON с распределением
   - Система переходит к следующему раунду только после полной проверки ответа

4. **Формат входных данных (JSON)**:
   - Список хостов с характеристиками (cpu, ram)
   - Список VM с характеристиками (cpu, ram)
   - Разница с предыдущим раундом (diff) - добавление или удаление одной VM
   - Значения ресурсов: целые числа в интервале [0, 32767]
   - Документы передаются в компактной форме без переносов строк

5. **Формат выходных данных (JSON)**:
   - Полная "карта" размещения VM по хостам (allocations)
   - Отметки о невозможности размещения VM (allocation_failures)
   - Отметки о миграции VM между хостами (migrations)

6. **Правила и ограничения**:
   - Хосты появляются только в первом раунде и не меняются
   - За каждый раунд одна VM либо добавляется, либо удаляется
   - Нельзя менять набор VM на хосте, кроме случаев:
     * Удаление VM, которых нет в текущем раунде
     * Добавление новых VM
     * Миграция VM с обязательной фиксацией
   - Отказы в размещении возможны только для новых VM
   - Отметки о миграциях и неразмещениях обязательны

7. **Система начисления баллов**:
   - Утилизация ~80% → 10 баллов (оптимальный режим)
   - Утилизация 100% → ~3 балла (предельная нагрузка)
   - Утилизация <80% → <10 баллов (недозагрузка)
   - Утилизация 0% → 0 баллов
   - Хост с нулевой утилизацией в течение 5+ раундов подряд (если ранее использовался) → +8 баллов (экономия)
   - **Утилизация хоста** рассчитывается как максимальная утилизация среди всех ресурсов (CPU, RAM)

8. **Штрафы**:
   - Невозможность разместить VM: -5×h баллов (где h - число хостов)
   - Миграция VM: -m² баллов (где m - число перемещенных VM за раунд)

9. **Технические требования**:
   - Docker-образ (поддержка linux/arm64/v8, linux/amd64)
   - Лимиты: 2GB памяти, CPU ограничен по времени выполнения
   - Процессоры: Apple M1 Pro (ARM64), AMD Ryzen 5 3500U (AMD64)

### Дополнительные детали из ответов на вопросы

1. **Утилизация ресурсов**:
   - Утилизация ресурса = (суммарное использование ресурса VM) / (полное количество ресурса на хосте)
   - Утилизация хоста = максимальное значение утилизации среди всех ресурсов (CPU, RAM)

2. **Бонусы за выключенные хосты**:
   - Применяются только к хостам, которые ранее уже использовались
   - После 5+ раундов простоя начисляется 8 баллов за каждый такой раунд

3. **Работа с VM**:
   - Если VM не удалось разместить, она не появится в последующих раундах
   - Нельзя мигрировать VM в том же раунде, в котором она была добавлена
   - На каждом раунде отметки о миграциях и неразмещениях не накапливаются

4. **Тестирование**:
   - Используются случайно сгенерированные последовательности (одинаковые для всех участников)
   - Баллы начисляются только за те раунды, которые программа успела обработать

5. **Особые случаи**:
   - Все миграции и добавление/удаление VM происходят одновременно
   - Можно за один ход снять нагрузку миграцией и добавить новую VM

### Важные формулы и метрики

1. **Формула вознаграждения за утилизацию**:
   f(x) = -0.67459 + (42.38075/(−2.5x+5.96))×exp(−2×(ln(−2.5x+2.96))²)
   где x - утилизация хоста (0 ≤ x ≤ 1)

2. **Ключевые значения**:
   - f(0) = 0 (нулевая утилизация)
   - f(0.807197) = 10 (оптимальная утилизация)
   - f(1) = 2.992622 (предельная утилизация)

### Доступные ресурсы

1. **Документация**:
   - info.md - полное описание трека
   - resources/input.schema.json - схема входных данных
   - resources/output.schema.json - схема выходных данных
   - resources/reward_function_plot.png - график функции вознаграждения
   - resources/example_input_multiple_rounds.txt - пример входных данных

2. **Тесты**:
   - Директория tests/ содержит множество тестовых сценариев (basic_placement, migration_test, resource_oscillation_test и др.)

## Выводы и план действий

1. **Основные принципы оптимизации**:
   - Стремиться к утилизации хостов ~80% (максимальные баллы)
   - Минимизировать миграции (штраф пропорционален квадрату числа миграций)
   - Стратегически выключать хосты (бонус за 5+ раундов простоя, если хост использовался)
   - Учитывать максимальную утилизацию среди всех ресурсов (CPU, RAM)

2. **Стратегические решения**:
   - Размещать VM с учетом отношения CPU/RAM
   - Консолидировать VM на минимальном числе хостов
   - Управлять выключением хостов для получения бонусов
   - Оптимизировать решения о миграции, учитывая штрафы

3. **Необходимые оптимизации**:
   - Улучшить базовое размещение VM
   - Минимизировать количество ненужных миграций
   - Эффективно обрабатывать удаление VM для консолидации
   - Оптимизировать утилизацию ресурсов между хостами
   - Улучшить обработку граничных случаев

## Наблюдения при тестировании

1. **Проблемы с обработкой входных данных**:
   - Программа в целом корректно обрабатывает несколько JSON объектов, разделенных переносами строк
   - Между ответами появляются пустые строки, что нужно исправить
   - В debug-выводе видны корректные логи для каждого раунда

2. **Проблемы с миграциями**:
   - В конце тестирования происходит много миграций с host7 на host2
   - Это может указывать на недостаточную оптимизацию начального размещения
   - Необходимо минимизировать количество миграций, поскольку их стоимость растет квадратично

3. **Счетчики нулевой утилизации**:
   - Корректно увеличиваются счетчики для хостов с нулевой утилизацией
   - Можно оптимизировать стратегию, чтобы целенаправленно выключать неиспользуемые хосты

## План улучшений (обновленный)

1. **Оптимизация обработки входных данных**:
   - Исправить обработку пустых строк между JSON объектами
   - Улучшить буферизацию для более эффективной обработки

2. **Оптимизация стратегии размещения VM**:
   - Учитывать целевую утилизацию около 80.7% (оптимальная)
   - Улучшить балансировку между CPU и RAM при размещении
   - Реализовать более агрессивную консолидацию на ранних этапах

3. **Оптимизация миграций**:
   - Ограничить количество миграций в каждом раунде
   - Вычислять реальную выгоду от миграции с учетом штрафов
   - Мигрировать только если выгода значительно превышает штраф

4. **Оптимизация выключения хостов**:
   - Стратегически выключать хосты, консолидируя VM на оптимальном количестве хостов
   - Отслеживать хосты, приближающиеся к 5 раундам простоя, и сохранять их пустыми
   - Улучшить учет бонусов за выключенные хосты при принятии решений

5. **Метрики и мониторинг**:
   - Добавить вычисление и логгирование текущей оценки для каждого раунда
   - Отслеживать утилизацию каждого хоста и общую утилизацию системы
   - Добавить подробные логи о причинах миграций и отказов размещения

## Извлеченные уроки

1. Алгоритм хорошо справляется со смешанной нагрузкой
2. Необходимо улучшить обработку сбоев размещения
3. Каскадная миграция работает эффективно
4. Есть возможности для оптимизации использования памяти
5. Утилизация хоста рассчитывается как максимальная утилизация среди всех ресурсов (а не средняя)
6. Бонусы за выключенные хосты применяются только после 5+ раундов простоя и только если хост использовался ранее
7. Штрафы за миграцию растут квадратично с количеством миграций
8. Оптимальная утилизация хоста - около 80.7% (максимальный балл - 10)
9. В трекере реализована экономия на отключенных хостах в виде бонусов

## Заметки для повторного использования

1. Стратегии оптимизации размещения VM:
   - Сортировка VM по размеру и требованиям к ресурсам
   - Группировка VM с похожими профилями ресурсов
   - Размещение с учетом соотношения CPU/RAM

2. Техники консолидации:
   - Перемещение VM с плохо утилизированных хостов
   - Освобождение хостов для получения бонусов
   - Балансировка нагрузки между хостами

3. Метрики оценки решений:
   - Утилизация хостов
   - Количество миграций
   - Количество хостов с нулевой утилизацией
   - Общий счет

## Технические детали реализации

1. **Работа с JSON**:
   - Входные документы передаются в компактной форме без переносов строк
   - Между документами добавляются переносы строки для разделения
   - Схемы JSON определяют строгую структуру входных и выходных данных
   - Максимальная длина имен хостов и VM - 63 символа

2. **Ограничения системы**:
   - Значения ресурсов (CPU, RAM): целые числа [1, 32767]
   - Память контейнера: 2GB
   - CPU: 3 ядра для ARM64, 6 ядер для AMD64
   - Время на раунд: 1 сек (ARM64) или 2 сек (AMD64)

3. **Особенности Docker-контейнера**:
   ```bash
   docker run --cpus <CPUS> --init --interactive --memory 2GB --network none \
       --no-healthcheck --read-only --tmpfs /tmp:rw,noexec,nosuid \
       --ulimit cpu=<SEC> <IMAGE>
   ```
   - Ядро Linux: 6.6 или выше
   - Поддержка платформ: linux/arm64/v8, linux/amd64

4. **Критические моменты в реализации**:
   - Нельзя накапливать отметки о миграциях и неразмещениях между раундами
   - Программа должна сохранять состояние между раундами в памяти
   - Важно валидировать JSON согласно схемам
   - Необходимо корректно обрабатывать UTF-8 кодировку

5. **Оптимизации производительности**:
   - Минимизировать время обработки каждого раунда
   - Эффективно использовать выделенную память
   - Избегать тяжелых вычислений при проверке миграций
   - Кэшировать промежуточные результаты где возможно

## Рекомендации по тестированию

1. **Тестовые сценарии**:
   - basic_placement: базовое размещение VM
   - migration_test: проверка миграций
   - resource_oscillation_test: колебания ресурсов
   - quantum_fluctuation_test: квантовые флуктуации
   - mixed_workload_test: смешанная нагрузка
   - edge_cases: граничные случаи
   - heterogeneous_hosts: разнородные хосты
   - cascade_migration_test: каскадные миграции
   - allocation_failure: обработка ошибок размещения

2. **Метрики для отслеживания**:
   - Время выполнения каждого раунда
   - Количество и причины отказов в размещении
   - Статистика миграций
   - Распределение утилизации по хостам
   - Количество выключенных хостов и длительность простоя

3. **Отладочная информация**:
   - Логировать важные решения планировщика
   - Отслеживать изменения в размещении VM
   - Фиксировать причины миграций
   - Записывать метрики утилизации